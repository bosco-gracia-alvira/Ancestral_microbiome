labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. sicerae - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Lplantarum, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Mmorganii, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Mmorganii$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("M. morganii - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Mmorganii$departure_from_reference == 0 | sum(Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
sum(Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
sum(Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
# Which percentage of SNPs are fixed?
sum(Mmorganii$departure_from_reference == 0 | Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1 & Mmorganii$departure_from_reference == 0) / nrow(Asicerae)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1 & Mmorganii$departure_from_reference == 0) / nrow(Asicerae)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
# Plot allele frequency vs coverage
ggplot(Aindonesiensis, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Aindonesiensis$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. indonesiensis-1 - Allele Frequency vs Coverage") +
xlim(0,1)
Aoryzifermentans <- SNPfiles[[11]]
# Subset the entries corresponding to the isolate
Aoryzifermentans <- subset(Aoryzifermentans, Aoryzifermentans$sample_id == "i589_G109_R16_T1_M_6")
Aoryzifermentans$coverage <- as.numeric(Aoryzifermentans$coverage)
Aoryzifermentans$departure_from_reference <- as.numeric(Aoryzifermentans$departure_from_reference)
Aoryzifermentans$pos <- as.numeric(Aoryzifermentans$pos)
# Plot allele frequency vs coverage
ggplot(Aoryzifermentans, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Aoryzifermentans$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. oryzifermentans - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Aoryzifermentans$departure_from_reference == 0 | Aoryzifermentans$departure_from_reference == 1) / nrow(Aoryzifermentans)
# Which percentage of SNPs are in coding genes?
sum(Aoryzifermentans$in_coding_gene_call == 1) / nrow(Aoryzifermentans)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Lplantarum$cov_outlier_in_contig == 1) / nrow(Lplantarum)
# Which percentage of SNPs are fixed?
sum(Lplantarum$departure_from_reference == 0 | Lplantarum$departure_from_reference == 1) / nrow(Lplantarum)
# Plot allele frequency vs coverage
ggplot(Lplantarum, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
# Which percentage of SNPs are fixed?
sum(Asicerae$departure_from_reference == 0 | Asicerae$departure_from_reference == 1) / nrow(Asicerae)
ggplot(Asicerae, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Asicerae$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. sicerae - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Mmorganii, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Mmorganii$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("M. morganii - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Aindonesiensis, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Aindonesiensis$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. indonesiensis-1 - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Lplantarum, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage") +
xlim(0,1)
ggplot(Lplantarum, aes(x = split_name, y = departure_from_reference, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage")
ggplot(Lplantarum, aes(x = split_name, y = departure_from_reference, colour = cov_outlier_in_contig)) +
geom_point()
ggplot(Lplantarum, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Lplantarum$cov_outlier_in_contig == 1) / nrow(Lplantarum)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Mmorganii$cov_outlier_in_contig == 1) / nrow(Mmorganii)
# Which percentage of SNPs are in coding genes?
sum(Aoryzifermentans$in_coding_gene_call == 1) / nrow(Aoryzifermentans)
sum(Aoryzifermentans$in_coding_gene_call == 1) / nrow(Aoryzifermentans)
ggplot(Aoryzifermentans, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Aoryzifermentans$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. oryzifermentans - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Aoryzifermentans$cov_outlier_in_contig == 1) / nrow(Aoryzifermentans)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
Mmorganii <- Mmorganii %>%
group_by(split_name) %>%
mutate(x_continuous = cumsum(c(0, diff(pos) > 1)))
ggplot(Mmorganii, aes(x = x_continuous, y = allele_frequency)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggplot(Mmorganii, aes(x = x_continuous, y = departure_from_reference)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
ggplot(Mmorganii, aes(x = x_continuous, y = departure_from_reference, colour = split_name)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
# Create a scatter plot with continuous x-axis
ggplot(Mmorganii, aes(x = x_continuous, y = departure_from_reference, colour = split_name)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(legend.position = "none")
Mmorganii <- Mmorganii %>% arrange(split_name, pos)
Mmorganii <- Mmorganii %>%
group_by(split_name) %>%
mutate(x_continuous = cumsum(c(0, diff(pos) > 1)))
# Create a scatter plot with continuous x-axis
ggplot(Mmorganii, aes(x = x_continuous, y = departure_from_reference, colour = split_name)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(legend.position = "none")
Mmorganii <- Mmorganii %>% arrange(split_name, pos)
Mmorganii <- Mmorganii %>%
group_by(split_name) %>%
mutate(chrom_group = row_number())
# Create a scatter plot with continuous x-axis
ggplot(Mmorganii, aes(x = chrom_group, y = departure_from_reference, colour = split_name)) +
geom_point() +
labs(x = "Sorted SNPs by Chromosome and Position", y = "Allele Frequency") +
ggtitle("Allele Frequency vs Sorted SNPs") +
scale_x_continuous(breaks = unique(Mmorganii$x_continuous), labels = NULL) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(legend.position = "none")
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; packageVersion("tidyverse")
library(dendextend) ; packageVersion("dendextend")
library(viridis) ; packageVersion("viridis")
library(areaplot)
library(dplyr)
library(gtools)
library(patchwork)
list.files()
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
}
getwd
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; packageVersion("tidyverse")
library(dendextend) ; packageVersion("dendextend")
library(viridis) ; packageVersion("viridis")
library(areaplot)
library(dplyr)
library(gtools)
library(patchwork)
list.files()
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
}
SNPpaths
getwd()
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
setwd("/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
}
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; packageVersion("tidyverse")
library(dendextend) ; packageVersion("dendextend")
library(viridis) ; packageVersion("viridis")
library(areaplot)
library(dplyr)
library(gtools)
library(patchwork)
list.files()
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
for (i in seq_along(SNPpaths)) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
}
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
read.table(SNPpaths[[i]])
SNPpaths[[i]]
taxa <- list.files()
list.files()
setwd("/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
if (file.exists(SNPpaths[[i]])) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
} else {
# Skip to the next iteration if the file doesn't exist
next
}
}
View(SNPfiles)
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; packageVersion("tidyverse")
library(dendextend) ; packageVersion("dendextend")
library(viridis) ; packageVersion("viridis")
library(areaplot)
library(dplyr)
library(gtools)
library(patchwork)
list.files()
setwd("/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
if (file.exists(SNPpaths[[i]])) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
} else {
# Skip to the next iteration if the file doesn't exist
next
}
}
View(data)
Mmorganii <- SNPfiles[[20]]
# Subset the entries corresponding to the isolate
Mmorganii <- subset(Mmorganii, Mmorganii$sample_id == "i503_G175_R4_T1_M_22")
Mmorganii$coverage <- as.numeric(Mmorganii$coverage)
Mmorganii$departure_from_reference <- as.numeric(Mmorganii$departure_from_reference)
Mmorganii$pos <- as.numeric(Mmorganii$pos)
# Plot allele frequency vs coverage
ggplot(Mmorganii, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Mmorganii$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("M. morganii - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Mmorganii$departure_from_reference == 0 | Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
# Which percentage of SNPs are in coding genes?
sum(Mmorganii$in_coding_gene_call == 1) / nrow(Mmorganii)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Mmorganii$cov_outlier_in_contig == 1) / nrow(Mmorganii)
View(Mmorganii)
length(unique(Mmorganii$corresponding_gene_call))
length(unique(Mmorganii$unique_pos_identifier))
length(unique(Mmorganii$corresponding_gene_call))
length(subset(Mmorganii, corresponding_gene_call != -1))
nrow(subset(Mmorganii, corresponding_gene_call != -1))
knitr::opts_knit$set(root.dir = "/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) ; packageVersion("tidyverse")
library(dendextend) ; packageVersion("dendextend")
library(viridis) ; packageVersion("viridis")
library(areaplot)
library(dplyr)
library(gtools)
library(patchwork)
list.files()
setwd("/Users/bgracia/Dropbox (PopGen)/Bosco/PhD_Dropbox/Ancestral_microbiome/data/Anvio_popgen/05_MAGS")
taxa <- list.files()
SNPpaths <- paste0(taxa,"/",taxa,"-SNVs.txt")
# Create an empty list to store imported data frames
SNPfiles <- list()
# Loop through each file and name
for (i in seq_along(SNPpaths)) {
if (file.exists(SNPpaths[[i]])) {
# Read the file and assign the name
data <- read.table(SNPpaths[[i]])
name <- taxa[[i]]
# Assign the name to the data frame
names(data) <- name
colnames(data) <- data[1,]
data <- data[-1,]
# Store the data frame in the list
SNPfiles[[i]] <- data
} else {
# Skip to the next iteration if the file doesn't exist
next
}
}
Mmorganii <- SNPfiles[[20]]
# Subset the entries corresponding to the isolate
Mmorganii <- subset(Mmorganii, Mmorganii$sample_id == "i503_G175_R4_T1_M_22")
Mmorganii$coverage <- as.numeric(Mmorganii$coverage)
Mmorganii$departure_from_reference <- as.numeric(Mmorganii$departure_from_reference)
Mmorganii$pos <- as.numeric(Mmorganii$pos)
# Plot allele frequency vs coverage
ggplot(Mmorganii, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Mmorganii$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("M. morganii - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Mmorganii$departure_from_reference == 0 | Mmorganii$departure_from_reference == 1) / nrow(Mmorganii)
# Which percentage of SNPs are in coding genes?
sum(Mmorganii$in_coding_gene_call == 1) / nrow(Mmorganii)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Mmorganii$cov_outlier_in_contig == 1) / nrow(Mmorganii)
length(unique(Mmorganii$unique_pos_identifier))
nrow(subset(Mmorganii, corresponding_gene_call != -1))
length(unique(Mmorganii$corresponding_gene_call))
Lplantarum <- SNPfiles[[17]]
# Subset the entries corresponding to the isolate
Lplantarum <- subset(Lplantarum, Lplantarum$sample_id == "i503_G175_R4_T2_T_50")
Lplantarum$coverage <- as.numeric(Lplantarum$coverage)
Lplantarum$departure_from_reference <- as.numeric(Lplantarum$departure_from_reference)
Lplantarum$pos <- as.numeric(Lplantarum$pos)
# Plot allele frequency vs coverage
ggplot(Lplantarum, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Lplantarum$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("L. plantarum - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Lplantarum$departure_from_reference == 0 | Lplantarum$departure_from_reference == 1) / nrow(Lplantarum)
# Which percentage of SNPs are in coding genes?
sum(Lplantarum$in_coding_gene_call == 1) / nrow(Lplantarum)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Lplantarum$cov_outlier_in_contig == 1) / nrow(Lplantarum)
Asicerae <- SNPfiles[[12]]
# Subset the entries corresponding to the isolate
Asicerae <- subset(Asicerae, Asicerae$sample_id == "i591_G109_R16_T2_MRS_15")
Asicerae$coverage <- as.numeric(Asicerae$coverage)
Asicerae$departure_from_reference <- as.numeric(Asicerae$departure_from_reference)
Asicerae$pos <- as.numeric(Asicerae$pos)
# Plot allele frequency vs coverage
ggplot(Asicerae, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Asicerae$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. sicerae - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Asicerae$departure_from_reference == 0 | Asicerae$departure_from_reference == 1) / nrow(Asicerae)
# Which percentage of SNPs are in coding genes?
sum(Asicerae$in_coding_gene_call == 1) / nrow(Asicerae)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Asicerae$cov_outlier_in_contig == 1) / nrow(Asicerae)
Aoryzifermentans <- SNPfiles[[11]]
# Subset the entries corresponding to the isolate
Aoryzifermentans <- subset(Aoryzifermentans, Aoryzifermentans$sample_id == "i589_G109_R16_T1_M_6")
Aoryzifermentans$coverage <- as.numeric(Aoryzifermentans$coverage)
Aoryzifermentans$departure_from_reference <- as.numeric(Aoryzifermentans$departure_from_reference)
Aoryzifermentans$pos <- as.numeric(Aoryzifermentans$pos)
# Plot allele frequency vs coverage
ggplot(Aoryzifermentans, aes(x = departure_from_reference, y = coverage, colour = cov_outlier_in_contig)) +
geom_point() +
geom_hline(yintercept = mean(Aoryzifermentans$coverage), linetype = "dashed", color = "red") +
labs(x = "Allele Frequency", y = "Coverage") +
ggtitle("A. oryzifermentans - Allele Frequency vs Coverage") +
xlim(0,1)
# Which percentage of SNPs are fixed?
sum(Aoryzifermentans$departure_from_reference == 0 | Aoryzifermentans$departure_from_reference == 1) / nrow(Aoryzifermentans)
# Which percentage of SNPs are in coding genes?
sum(Aoryzifermentans$in_coding_gene_call == 1) / nrow(Aoryzifermentans)
# Which percentage of SNPs are deviated from the coverage of their contig?
sum(Aoryzifermentans$cov_outlier_in_contig == 1) / nrow(Aoryzifermentans)
length(unique(Mmorganii$unique_pos_identifier))
nrow(subset(Mmorganii, corresponding_gene_call != -1))
length(unique(Mmorganii$unique_pos_identifier))
length(unique(Mmorganii$corresponding_gene_call))
View(Mmorganii)
data.frame(
unique_value = as.character(names(Mmorganii$corresponding_gene_call)),
count = as.numeric(Mmorganii$corresponding_gene_call))
names(Mmorganii$corresponding_gene_call)
your_column_counts <- table(Mmorganii$corresponding_gene_call)
new_table <- data.frame(
unique_value = as.character(names(your_column_counts)),
count = as.numeric(your_column_counts)
)
new_table
new_table <- subset(new_table, unique_value != "-1")
new_table
mean(new_table$count)
median(new_table$count)
View(new_table)
boxplot(new_table_filtered$count,
main = "Boxplot of Counts",
ylab = "Count",
col = "lightblue",
border = "blue")
boxplot(new_table$count,
main = "Boxplot of Counts",
ylab = "Count",
col = "lightblue",
border = "blue")
boxplot(new_table$count,
main = "Boxplot of Counts",
ylab = "Count",
col = "lightblue",
border = "blue")
